{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { observable, makeObservable, action } from 'mobx';\nimport { persistence, useClear, useDisposers, isSynchronized, StorageAdapter } from 'mobx-persist-store';\n\nfunction readStore(name) {\n  return new Promise(function (resolve) {\n    var data = localStorage.getItem(name);\n    resolve(JSON.parse(data));\n  });\n}\n\nfunction writeStore(name, content) {\n  return new Promise(function (resolve) {\n    localStorage.setItem(name, JSON.stringify(content));\n    resolve();\n  });\n}\n\nvar BagState = function BagState() {\n  var _this = this;\n\n  _classCallCheck(this, BagState);\n\n  _defineProperty(this, \"items\", []);\n\n  _defineProperty(this, \"addItem\", function (newItem) {\n    var currentItem = _this.items.find(function (item) {\n      return item.name === newItem.name;\n    }); // items.forEach(item => {\n    //     item.name === newItem.name\n    // });\n\n\n    if (currentItem) {\n      currentItem.quantity++;\n    } else {\n      newItem.quantity = 1;\n      _this.items = [].concat(_toConsumableArray(_this.items), [newItem]);\n    }\n  });\n\n  _defineProperty(this, \"removeItem\", function (itemName) {\n    _this.items = _this.items.filter(function (item) {\n      return item.name !== itemName;\n    });\n  });\n\n  _defineProperty(this, \"changeQuantity\", function (itemName, value) {\n    var currentItem = _this.items.find(function (item) {\n      return item.name === itemName;\n    });\n\n    currentItem.quantity = value;\n  });\n\n  makeObservable(this, {\n    items: observable,\n    addItem: action,\n    removeItem: action,\n    changeQuantity: action\n  });\n};\n\npersistence({\n  name: 'BagState',\n  properties: ['items'],\n  adapter: new StorageAdapter({\n    read: readStore,\n    write: writeStore\n  })\n})(BagState);\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","persistence","useClear","useDisposers","isSynchronized","StorageAdapter","readStore","name","Promise","resolve","data","localStorage","getItem","JSON","parse","writeStore","content","setItem","stringify","BagState","newItem","currentItem","items","find","item","quantity","itemName","filter","value","addItem","removeItem","changeQuantity","properties","adapter","read","write"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;AACA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,cAJJ,EAKIC,cALJ,QAMO,oBANP;;AAQA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBL,IAArB,CAAb;AACAE,IAAAA,OAAO,CAACI,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAD,CAAP;AACH,GAHM,CAAP;AAIH;;AAED,SAASK,UAAT,CAAoBR,IAApB,EAA0BS,OAA1B,EAAmC;AAC/B,SAAO,IAAIR,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1BE,IAAAA,YAAY,CAACM,OAAb,CAAqBV,IAArB,EAA2BM,IAAI,CAACK,SAAL,CAAeF,OAAf,CAA3B;AACAP,IAAAA,OAAO;AACV,GAHM,CAAP;AAIH;;IAEKU,Q,GA2BF,oBAAc;AAAA;;AAAA;;AAAA,iCA1BN,EA0BM;;AAAA,mCAxBJ,UAAAC,OAAO,EAAI;AACjB,QAAMC,WAAW,GAAG,KAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACjB,IAAL,KAAca,OAAO,CAACb,IAA1B;AAAA,KAApB,CAApB,CADiB,CAEjB;AACA;AACA;;;AACA,QAAIc,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACI,QAAZ;AACH,KAFD,MAEO;AACHL,MAAAA,OAAO,CAACK,QAAR,GAAmB,CAAnB;AACA,MAAA,KAAI,CAACH,KAAL,gCAAiB,KAAI,CAACA,KAAtB,IAA6BF,OAA7B;AACH;AACJ,GAaa;;AAAA,sCAXD,UAAAM,QAAQ,EAAI;AACrB,IAAA,KAAI,CAACJ,KAAL,GAAa,KAAI,CAACA,KAAL,CAAWK,MAAX,CAAkB,UAAAH,IAAI;AAAA,aAAIA,IAAI,CAACjB,IAAL,KAAcmB,QAAlB;AAAA,KAAtB,CAAb;AACH,GASa;;AAAA,0CAPG,UAACA,QAAD,EAAWE,KAAX,EAAqB;AAClC,QAAMP,WAAW,GAAG,KAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACjB,IAAL,KAAcmB,QAAlB;AAAA,KAApB,CAApB;;AACAL,IAAAA,WAAW,CAACI,QAAZ,GAAuBG,KAAvB;AACH,GAIa;;AACV7B,EAAAA,cAAc,CAAC,IAAD,EAAO;AACjBuB,IAAAA,KAAK,EAAExB,UADU;AAEjB+B,IAAAA,OAAO,EAAE7B,MAFQ;AAGjB8B,IAAAA,UAAU,EAAE9B,MAHK;AAIjB+B,IAAAA,cAAc,EAAE/B;AAJC,GAAP,CAAd;AAMH,C;;AAGLC,WAAW,CAAC;AACRM,EAAAA,IAAI,EAAE,UADE;AAERyB,EAAAA,UAAU,EAAE,CAAC,OAAD,CAFJ;AAGRC,EAAAA,OAAO,EAAE,IAAI5B,cAAJ,CAAmB;AACxB6B,IAAAA,IAAI,EAAE5B,SADkB;AAExB6B,IAAAA,KAAK,EAAEpB;AAFiB,GAAnB;AAHD,CAAD,CAAX,CAOGI,QAPH;AASA,eAAe,IAAIA,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\nimport {\n    persistence,\n    useClear,\n    useDisposers,\n    isSynchronized,\n    StorageAdapter,\n} from 'mobx-persist-store'\n\nfunction readStore(name) {\n    return new Promise(resolve => {\n        const data = localStorage.getItem(name)\n        resolve(JSON.parse(data))\n    })\n}\n\nfunction writeStore(name, content) {\n    return new Promise(resolve => {\n        localStorage.setItem(name, JSON.stringify(content))\n        resolve()\n    })\n}\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        const currentItem = this.items.find(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            newItem.quantity = 1\n            this.items = [...this.items, newItem]\n        }\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n    }\n\n    \n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n    }\n}\n\npersistence({\n    name: 'BagState',\n    properties: ['items'],\n    adapter: new StorageAdapter({\n        read: readStore,\n        write: writeStore,\n    }),\n})(BagState)\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}