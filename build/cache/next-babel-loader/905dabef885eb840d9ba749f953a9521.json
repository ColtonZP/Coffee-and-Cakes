{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\n\nclass BagState {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItem => {\n      const itemIndex = this.items.some(item => item.name === newItem.name); // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      console.log(itemIndex);\n      this.items = [...this.items, newItem];\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n    });\n\n    makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action\n    });\n  }\n\n}\n\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/components/Bag.js"],"names":["observable","makeObservable","action","BagState","constructor","newItem","itemIndex","items","some","item","name","console","log","itemName","filter","addItem","removeItem"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;;AAEA,MAAMC,QAAN,CAAe;AAgBXC,EAAAA,WAAW,GAAG;AAAA,mCAfN,EAeM;;AAAA,qCAbJC,OAAO,IAAI;AACjB,YAAMC,SAAS,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcL,OAAO,CAACK,IAA9C,CAAlB,CADiB,CAEjB;AACA;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACA,WAAKC,KAAL,GAAa,CAAC,GAAG,KAAKA,KAAT,EAAgBF,OAAhB,CAAb;AACH,KAMa;;AAAA,wCAJDQ,QAAQ,IAAI;AACrB,WAAKN,KAAL,GAAa,KAAKA,KAAL,CAAWO,MAAX,CAAkBL,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcG,QAAxC,CAAb;AACH,KAEa;;AACVZ,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBM,MAAAA,KAAK,EAAEP,UADU;AAEjBe,MAAAA,OAAO,EAAEb,MAFQ;AAGjBc,MAAAA,UAAU,EAAEd;AAHK,KAAP,CAAd;AAKH;;AAtBU;;AAyBf,eAAe,IAAIC,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        const itemIndex = this.items.some(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        console.log(itemIndex)\n        this.items = [...this.items, newItem]\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n        })\n    }\n}\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}