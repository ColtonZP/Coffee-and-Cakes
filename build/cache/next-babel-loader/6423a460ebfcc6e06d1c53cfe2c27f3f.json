{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\n\nclass BagState {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItemId => {\n      const currentItem = this.items.find(item => item.id === newItemId); // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      if (currentItem) {\n        currentItem.quantity++;\n      } else {\n        const newItem = {\n          'quantity': 1\n        };\n        this.items = [...this.items, newItem];\n      }\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n    });\n\n    _defineProperty(this, \"changeQuantity\", (itemName, value) => {\n      const currentItem = this.items.find(item => item.name === itemName);\n      currentItem.quantity = value;\n    });\n\n    makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action,\n      changeQuantity: action\n    });\n  }\n\n}\n\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","BagState","constructor","newItemId","currentItem","items","find","item","id","quantity","newItem","itemName","filter","name","value","addItem","removeItem","changeQuantity"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;;AAEA,MAAMC,QAAN,CAAe;AA4BXC,EAAAA,WAAW,GAAG;AAAA,mCA3BN,EA2BM;;AAAA,qCAzBJC,SAAS,IAAI;AACnB,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,SAApC,CAApB,CADmB,CAEnB;AACA;AACA;;AACA,UAAIC,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACK,QAAZ;AACH,OAFD,MAEO;AACH,cAAMC,OAAO,GAAG;AAEZ,sBAAY;AAFA,SAAhB;AAIA,aAAKL,KAAL,GAAa,CAAC,GAAG,KAAKA,KAAT,EAAgBK,OAAhB,CAAb;AACH;AACJ,KAWa;;AAAA,wCATDC,QAAQ,IAAI;AACrB,WAAKN,KAAL,GAAa,KAAKA,KAAL,CAAWO,MAAX,CAAkBL,IAAI,IAAIA,IAAI,CAACM,IAAL,KAAcF,QAAxC,CAAb;AACH,KAOa;;AAAA,4CALG,CAACA,QAAD,EAAWG,KAAX,KAAqB;AAClC,YAAMV,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACM,IAAL,KAAcF,QAAtC,CAApB;AACAP,MAAAA,WAAW,CAACK,QAAZ,GAAuBK,KAAvB;AACH,KAEa;;AACVf,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBM,MAAAA,KAAK,EAAEP,UADU;AAEjBiB,MAAAA,OAAO,EAAEf,MAFQ;AAGjBgB,MAAAA,UAAU,EAAEhB,MAHK;AAIjBiB,MAAAA,cAAc,EAAEjB;AAJC,KAAP,CAAd;AAMH;;AAnCU;;AAsCf,eAAe,IAAIC,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\n\nclass BagState {\n    items = []\n\n    addItem = newItemId => {\n        const currentItem = this.items.find(item => item.id === newItemId)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            const newItem = {\n\n                'quantity': 1\n            }\n            this.items = [...this.items, newItem]\n        }\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n    }\n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n    }\n}\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}