{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\n\nfunction updateStorage(bag) {\n  localStorage.setItem('inBag', JSON.stringify(bag));\n}\n\nclass BagState {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItem => {\n      const currentItem = this.items.find(item => item.name === newItem.name); // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      if (currentItem) {\n        currentItem.quantity++;\n      } else {\n        newItem.quantity = 1;\n        this.items = [...this.items, newItem];\n      }\n\n      updateStorage(this.items);\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n      updateStorage(this.items);\n    });\n\n    _defineProperty(this, \"changeQuantity\", (itemName, value) => {\n      const currentItem = this.items.find(item => item.name === itemName);\n      currentItem.quantity = value;\n      updateStorage(this.items);\n    });\n\n    _defineProperty(this, \"pullItems\", items => {\n      this.items = items;\n    });\n\n    this.items = [];\n    makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action,\n      changeQuantity: action,\n      pullItems: action\n    });\n  }\n\n}\n\nexport default new BagState();","map":null,"metadata":{},"sourceType":"module"}