{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { observable, makeObservable, action } from 'mobx';\n\nfunction updateStorage(bag) {\n  localStorage.setItem('inBag', JSON.stringify(bag));\n  console.log(JSON.parse(localStorage.getItem('inBag')));\n}\n\nfunction getStorage() {\n  return _getStorage.apply(this, arguments);\n}\n\nfunction _getStorage() {\n  _getStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return JSON.parse(localStorage.getItem('inBag'));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStorage.apply(this, arguments);\n}\n\nvar BagState = function BagState() {\n  var _this = this;\n\n  _classCallCheck(this, BagState);\n\n  _defineProperty(this, \"items\", []);\n\n  _defineProperty(this, \"addItem\", function (newItem) {\n    var currentItem = _this.items.find(function (item) {\n      return item.name === newItem.name;\n    }); // items.forEach(item => {\n    //     item.name === newItem.name\n    // });\n\n\n    if (currentItem) {\n      currentItem.quantity++;\n    } else {\n      newItem.quantity = 1;\n      _this.items = [].concat(_toConsumableArray(_this.items), [newItem]);\n    }\n\n    updateStorage(_this.items);\n  });\n\n  _defineProperty(this, \"removeItem\", function (itemName) {\n    _this.items = _this.items.filter(function (item) {\n      return item.name !== itemName;\n    });\n    updateStorage(_this.items);\n  });\n\n  _defineProperty(this, \"changeQuantity\", function (itemName, value) {\n    var currentItem = _this.items.find(function (item) {\n      return item.name === itemName;\n    });\n\n    currentItem.quantity = value;\n    updateStorage(_this.items);\n  });\n\n  this.items = [], makeObservable(this, {\n    items: observable,\n    addItem: action,\n    removeItem: action,\n    changeQuantity: action\n  });\n};\n\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","updateStorage","bag","localStorage","setItem","JSON","stringify","console","log","parse","getItem","getStorage","BagState","newItem","currentItem","items","find","item","name","quantity","itemName","filter","value","addItem","removeItem","changeQuantity"],"mappings":";;;;;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACxBC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAA9B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAX,CAAZ;AACH;;SAEcC,U;;;;;yEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBN,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAX,CADjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;IAIME,Q,GA4BF,oBAAc;AAAA;;AAAA;;AAAA,iCA3BN,EA2BM;;AAAA,mCAzBJ,UAAAC,OAAO,EAAI;AACjB,QAAMC,WAAW,GAAG,KAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcL,OAAO,CAACK,IAA1B;AAAA,KAApB,CAApB,CADiB,CAEjB;AACA;AACA;;;AACA,QAAIJ,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACK,QAAZ;AACH,KAFD,MAEO;AACHN,MAAAA,OAAO,CAACM,QAAR,GAAmB,CAAnB;AACA,MAAA,KAAI,CAACJ,KAAL,gCAAiB,KAAI,CAACA,KAAtB,IAA6BF,OAA7B;AACH;;AACDZ,IAAAA,aAAa,CAAC,KAAI,CAACc,KAAN,CAAb;AACH,GAaa;;AAAA,sCAXD,UAAAK,QAAQ,EAAI;AACrB,IAAA,KAAI,CAACL,KAAL,GAAa,KAAI,CAACA,KAAL,CAAWM,MAAX,CAAkB,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcE,QAAlB;AAAA,KAAtB,CAAb;AACAnB,IAAAA,aAAa,CAAC,KAAI,CAACc,KAAN,CAAb;AACH,GAQa;;AAAA,0CANG,UAACK,QAAD,EAAWE,KAAX,EAAqB;AAClC,QAAMR,WAAW,GAAG,KAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcE,QAAlB;AAAA,KAApB,CAApB;;AACAN,IAAAA,WAAW,CAACK,QAAZ,GAAuBG,KAAvB;AACArB,IAAAA,aAAa,CAAC,KAAI,CAACc,KAAN,CAAb;AACH,GAEa;;AACV,OAAKA,KAAL,GAAa,EAAb,EACAhB,cAAc,CAAC,IAAD,EAAO;AACjBgB,IAAAA,KAAK,EAAEjB,UADU;AAEjByB,IAAAA,OAAO,EAAEvB,MAFQ;AAGjBwB,IAAAA,UAAU,EAAExB,MAHK;AAIjByB,IAAAA,cAAc,EAAEzB;AAJC,GAAP,CADd;AAOH,C;;AAGL,eAAe,IAAIY,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\n\nfunction updateStorage(bag) {\n    localStorage.setItem('inBag', JSON.stringify(bag))\n    console.log(JSON.parse(localStorage.getItem('inBag')))\n}\n\nasync function getStorage() {\n    return await JSON.parse(localStorage.getItem('inBag'))\n}\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        const currentItem = this.items.find(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            newItem.quantity = 1\n            this.items = [...this.items, newItem]\n        }\n        updateStorage(this.items)\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n        updateStorage(this.items)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n        updateStorage(this.items)\n    }\n\n    constructor() {\n        this.items = [],\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n    }\n}\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}