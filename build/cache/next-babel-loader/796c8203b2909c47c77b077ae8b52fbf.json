{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { observable, makeObservable, action } from 'mobx';\nimport { persistence, useClear, useDisposers, isSynchronized, StorageAdapter } from 'mobx-persist-store';\n\nvar BagState = function BagState() {\n  var _this = this;\n\n  _classCallCheck(this, BagState);\n\n  _defineProperty(this, \"items\", []);\n\n  _defineProperty(this, \"addItem\", function (newItem) {\n    var currentItem = _this.items.find(function (item) {\n      return item.name === newItem.name;\n    }); // items.forEach(item => {\n    //     item.name === newItem.name\n    // });\n\n\n    if (currentItem) {\n      currentItem.quantity++;\n    } else {\n      newItem.quantity = 1;\n      _this.items = [].concat(_toConsumableArray(_this.items), [newItem]);\n    }\n  });\n\n  _defineProperty(this, \"removeItem\", function (itemName) {\n    _this.items = _this.items.filter(function (item) {\n      return item.name !== itemName;\n    });\n  });\n\n  _defineProperty(this, \"changeQuantity\", function (itemName, value) {\n    var currentItem = _this.items.find(function (item) {\n      return item.name === itemName;\n    });\n\n    currentItem.quantity = value;\n  });\n\n  makeObservable(this, {\n    items: observable,\n    addItem: action,\n    removeItem: action,\n    changeQuantity: action\n  });\n};\n\npersistence({\n  name: 'BagState',\n  properties: ['items'],\n  adapter: new StorageAdapter({\n    read: readStore,\n    write: writeStore\n  })\n})(BagState);\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","persistence","useClear","useDisposers","isSynchronized","StorageAdapter","BagState","newItem","currentItem","items","find","item","name","quantity","itemName","filter","value","addItem","removeItem","changeQuantity","properties","adapter","read","readStore","write","writeStore"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;AACA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,cAJJ,EAKIC,cALJ,QAMO,oBANP;;IAQMC,Q,GAyBF,oBAAc;AAAA;;AAAA;;AAAA,iCAxBN,EAwBM;;AAAA,mCAtBJ,UAAAC,OAAO,EAAI;AACjB,QAAMC,WAAW,GAAG,KAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcL,OAAO,CAACK,IAA1B;AAAA,KAApB,CAApB,CADiB,CAEjB;AACA;AACA;;;AACA,QAAIJ,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACK,QAAZ;AACH,KAFD,MAEO;AACHN,MAAAA,OAAO,CAACM,QAAR,GAAmB,CAAnB;AACA,MAAA,KAAI,CAACJ,KAAL,gCAAiB,KAAI,CAACA,KAAtB,IAA6BF,OAA7B;AACH;AACJ,GAWa;;AAAA,sCATD,UAAAO,QAAQ,EAAI;AACrB,IAAA,KAAI,CAACL,KAAL,GAAa,KAAI,CAACA,KAAL,CAAWM,MAAX,CAAkB,UAAAJ,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcE,QAAlB;AAAA,KAAtB,CAAb;AACH,GAOa;;AAAA,0CALG,UAACA,QAAD,EAAWE,KAAX,EAAqB;AAClC,QAAMR,WAAW,GAAG,KAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,KAAcE,QAAlB;AAAA,KAApB,CAApB;;AACAN,IAAAA,WAAW,CAACK,QAAZ,GAAuBG,KAAvB;AACH,GAEa;;AACVjB,EAAAA,cAAc,CAAC,IAAD,EAAO;AACjBU,IAAAA,KAAK,EAAEX,UADU;AAEjBmB,IAAAA,OAAO,EAAEjB,MAFQ;AAGjBkB,IAAAA,UAAU,EAAElB,MAHK;AAIjBmB,IAAAA,cAAc,EAAEnB;AAJC,GAAP,CAAd;AAMH,C;;AAGLC,WAAW,CAAC;AACRW,EAAAA,IAAI,EAAE,UADE;AAERQ,EAAAA,UAAU,EAAE,CAAC,OAAD,CAFJ;AAGRC,EAAAA,OAAO,EAAE,IAAIhB,cAAJ,CAAmB;AACxBiB,IAAAA,IAAI,EAAEC,SADkB;AAExBC,IAAAA,KAAK,EAAEC;AAFiB,GAAnB;AAHD,CAAD,CAAX,CAOGnB,QAPH;AASA,eAAe,IAAIA,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\nimport {\n    persistence,\n    useClear,\n    useDisposers,\n    isSynchronized,\n    StorageAdapter,\n} from 'mobx-persist-store'\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        const currentItem = this.items.find(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            newItem.quantity = 1\n            this.items = [...this.items, newItem]\n        }\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n    }\n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n    }\n}\n\npersistence({\n    name: 'BagState',\n    properties: ['items'],\n    adapter: new StorageAdapter({\n        read: readStore,\n        write: writeStore,\n    }),\n})(BagState)\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}