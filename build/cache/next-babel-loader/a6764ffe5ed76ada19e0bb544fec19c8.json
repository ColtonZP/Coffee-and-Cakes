{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\nimport { persistence, useClear, useDisposers, isSynchronized, StorageAdapter } from 'mobx-persist-store';\n\nfunction readStore(name) {\n  return new Promise(resolve => {\n    const data = localStorage.getItem(name);\n    resolve(JSON.parse(data));\n  });\n}\n\nfunction writeStore(name, content) {\n  return new Promise(resolve => {\n    localStorage.setItem(name, JSON.stringify(content));\n    resolve();\n  });\n}\n\nclass BagState {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItem => {\n      const currentItem = this.items.find(item => item.name === newItem.name); // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      if (currentItem) {\n        currentItem.quantity++;\n      } else {\n        newItem.quantity = 1;\n        this.items = [...this.items, newItem];\n      }\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n    });\n\n    _defineProperty(this, \"changeQuantity\", (itemName, value) => {\n      const currentItem = this.items.find(item => item.name === itemName);\n      currentItem.quantity = value;\n    });\n\n    makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action,\n      changeQuantity: action\n    });\n  }\n\n}\n\npersistence({\n  name: 'BagState',\n  properties: ['items'],\n  adapter: new StorageAdapter({\n    read: readStore,\n    write: writeStore\n  })\n})(BagState);\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","persistence","useClear","useDisposers","isSynchronized","StorageAdapter","readStore","name","Promise","resolve","data","localStorage","getItem","JSON","parse","writeStore","content","setItem","stringify","BagState","constructor","newItem","currentItem","items","find","item","quantity","itemName","filter","value","addItem","removeItem","changeQuantity","properties","adapter","read","write"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;AACA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,cAJJ,EAKIC,cALJ,QAMO,oBANP;;AAQA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1B,UAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBL,IAArB,CAAb;AACAE,IAAAA,OAAO,CAACI,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAD,CAAP;AACH,GAHM,CAAP;AAIH;;AAED,SAASK,UAAT,CAAoBR,IAApB,EAA0BS,OAA1B,EAAmC;AAC/B,SAAO,IAAIR,OAAJ,CAAYC,OAAO,IAAI;AAC1BE,IAAAA,YAAY,CAACM,OAAb,CAAqBV,IAArB,EAA2BM,IAAI,CAACK,SAAL,CAAeF,OAAf,CAA3B;AACAP,IAAAA,OAAO;AACV,GAHM,CAAP;AAIH;;AAED,MAAMU,QAAN,CAAe;AA2BXC,EAAAA,WAAW,GAAG;AAAA,mCA1BN,EA0BM;;AAAA,qCAxBJC,OAAO,IAAI;AACjB,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAAClB,IAAL,KAAcc,OAAO,CAACd,IAA9C,CAApB,CADiB,CAEjB;AACA;AACA;;AACA,UAAIe,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACI,QAAZ;AACH,OAFD,MAEO;AACHL,QAAAA,OAAO,CAACK,QAAR,GAAmB,CAAnB;AACA,aAAKH,KAAL,GAAa,CAAC,GAAG,KAAKA,KAAT,EAAgBF,OAAhB,CAAb;AACH;AACJ,KAaa;;AAAA,wCAXDM,QAAQ,IAAI;AACrB,WAAKJ,KAAL,GAAa,KAAKA,KAAL,CAAWK,MAAX,CAAkBH,IAAI,IAAIA,IAAI,CAAClB,IAAL,KAAcoB,QAAxC,CAAb;AACH,KASa;;AAAA,4CAPG,CAACA,QAAD,EAAWE,KAAX,KAAqB;AAClC,YAAMP,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAAClB,IAAL,KAAcoB,QAAtC,CAApB;AACAL,MAAAA,WAAW,CAACI,QAAZ,GAAuBG,KAAvB;AACH,KAIa;;AACV9B,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBwB,MAAAA,KAAK,EAAEzB,UADU;AAEjBgC,MAAAA,OAAO,EAAE9B,MAFQ;AAGjB+B,MAAAA,UAAU,EAAE/B,MAHK;AAIjBgC,MAAAA,cAAc,EAAEhC;AAJC,KAAP,CAAd;AAMH;;AAlCU;;AAqCfC,WAAW,CAAC;AACRM,EAAAA,IAAI,EAAE,UADE;AAER0B,EAAAA,UAAU,EAAE,CAAC,OAAD,CAFJ;AAGRC,EAAAA,OAAO,EAAE,IAAI7B,cAAJ,CAAmB;AACxB8B,IAAAA,IAAI,EAAE7B,SADkB;AAExB8B,IAAAA,KAAK,EAAErB;AAFiB,GAAnB;AAHD,CAAD,CAAX,CAOGI,QAPH;AASA,eAAe,IAAIA,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\nimport {\n    persistence,\n    useClear,\n    useDisposers,\n    isSynchronized,\n    StorageAdapter,\n} from 'mobx-persist-store'\n\nfunction readStore(name) {\n    return new Promise(resolve => {\n        const data = localStorage.getItem(name)\n        resolve(JSON.parse(data))\n    })\n}\n\nfunction writeStore(name, content) {\n    return new Promise(resolve => {\n        localStorage.setItem(name, JSON.stringify(content))\n        resolve()\n    })\n}\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        const currentItem = this.items.find(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            newItem.quantity = 1\n            this.items = [...this.items, newItem]\n        }\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n    }\n\n    \n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n    }\n}\n\npersistence({\n    name: 'BagState',\n    properties: ['items'],\n    adapter: new StorageAdapter({\n        read: readStore,\n        write: writeStore,\n    }),\n})(BagState)\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}