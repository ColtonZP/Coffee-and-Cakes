{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\n\nclass BagState {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItem => {\n      itemIndex = items.indexOf; // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      this.items = [...this.items, newItem];\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n    });\n\n    makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action\n    });\n  }\n\n}\n\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/components/Bag.js"],"names":["observable","makeObservable","action","BagState","constructor","newItem","itemIndex","items","indexOf","itemName","filter","item","name","addItem","removeItem"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;;AAEA,MAAMC,QAAN,CAAe;AAeXC,EAAAA,WAAW,GAAG;AAAA,mCAdN,EAcM;;AAAA,qCAZJC,OAAO,IAAI;AACjBC,MAAAA,SAAS,GAAGC,KAAK,CAACC,OAAlB,CADiB,CAEjB;AACA;AACA;;AACA,WAAKD,KAAL,GAAa,CAAC,GAAG,KAAKA,KAAT,EAAgBF,OAAhB,CAAb;AACH,KAMa;;AAAA,wCAJDI,QAAQ,IAAI;AACrB,WAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWG,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcH,QAAxC,CAAb;AACH,KAEa;;AACVR,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBM,MAAAA,KAAK,EAAEP,UADU;AAEjBa,MAAAA,OAAO,EAAEX,MAFQ;AAGjBY,MAAAA,UAAU,EAAEZ;AAHK,KAAP,CAAd;AAKH;;AArBU;;AAwBf,eAAe,IAAIC,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        itemIndex = items.indexOf\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        this.items = [...this.items, newItem]\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action\n        })\n    }\n}\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}