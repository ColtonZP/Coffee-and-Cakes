{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\nimport { persistence, useClear, useDisposers, isSynchronized, StorageAdapter } from 'mobx-persist-store';\n\nclass Bag {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItem => {\n      const currentItem = this.items.find(item => item.name === newItem.name); // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      if (currentItem) {\n        currentItem.quantity++;\n      } else {\n        newItem.quantity = 1;\n        this.items = [...this.items, newItem];\n      }\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n    });\n\n    _defineProperty(this, \"changeQuantity\", (itemName, value) => {\n      const currentItem = this.items.find(item => item.name === itemName);\n      currentItem.quantity = value;\n    });\n\n    makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action,\n      changeQuantity: action\n    });\n  }\n\n}\n\npersistence({\n  name: 'BagState',\n  properties: ['counter'],\n  adapter: new StorageAdapter({\n    read: readStore,\n    write: writeStore\n  }),\n  reactionOptions: {\n    // optional\n    delay: 2000\n  }\n})(CounterStore);\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","persistence","useClear","useDisposers","isSynchronized","StorageAdapter","Bag","constructor","newItem","currentItem","items","find","item","name","quantity","itemName","filter","value","addItem","removeItem","changeQuantity","properties","adapter","read","readStore","write","writeStore","reactionOptions","delay","CounterStore","BagState"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;AACA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,cAJJ,EAKIC,cALJ,QAMO,oBANP;;AAQA,MAAMC,GAAN,CAAU;AAyBNC,EAAAA,WAAW,GAAG;AAAA,mCAxBN,EAwBM;;AAAA,qCAtBJC,OAAO,IAAI;AACjB,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcL,OAAO,CAACK,IAA9C,CAApB,CADiB,CAEjB;AACA;AACA;;AACA,UAAIJ,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACK,QAAZ;AACH,OAFD,MAEO;AACHN,QAAAA,OAAO,CAACM,QAAR,GAAmB,CAAnB;AACA,aAAKJ,KAAL,GAAa,CAAC,GAAG,KAAKA,KAAT,EAAgBF,OAAhB,CAAb;AACH;AACJ,KAWa;;AAAA,wCATDO,QAAQ,IAAI;AACrB,WAAKL,KAAL,GAAa,KAAKA,KAAL,CAAWM,MAAX,CAAkBJ,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcE,QAAxC,CAAb;AACH,KAOa;;AAAA,4CALG,CAACA,QAAD,EAAWE,KAAX,KAAqB;AAClC,YAAMR,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcE,QAAtC,CAApB;AACAN,MAAAA,WAAW,CAACK,QAAZ,GAAuBG,KAAvB;AACH,KAEa;;AACVlB,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBW,MAAAA,KAAK,EAAEZ,UADU;AAEjBoB,MAAAA,OAAO,EAAElB,MAFQ;AAGjBmB,MAAAA,UAAU,EAAEnB,MAHK;AAIjBoB,MAAAA,cAAc,EAAEpB;AAJC,KAAP,CAAd;AAMH;;AAhCK;;AAmCVC,WAAW,CAAC;AACRY,EAAAA,IAAI,EAAE,UADE;AAERQ,EAAAA,UAAU,EAAE,CAAC,SAAD,CAFJ;AAGRC,EAAAA,OAAO,EAAE,IAAIjB,cAAJ,CAAmB;AACxBkB,IAAAA,IAAI,EAAEC,SADkB;AAExBC,IAAAA,KAAK,EAAEC;AAFiB,GAAnB,CAHD;AAORC,EAAAA,eAAe,EAAE;AACb;AACAC,IAAAA,KAAK,EAAE;AAFM;AAPT,CAAD,CAAX,CAWGC,YAXH;AAaA,eAAe,IAAIC,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\nimport {\n    persistence,\n    useClear,\n    useDisposers,\n    isSynchronized,\n    StorageAdapter,\n} from 'mobx-persist-store'\n\nclass Bag {\n    items = []\n\n    addItem = newItem => {\n        const currentItem = this.items.find(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            newItem.quantity = 1\n            this.items = [...this.items, newItem]\n        }\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n    }\n\n    constructor() {\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n    }\n}\n\npersistence({\n    name: 'BagState',\n    properties: ['counter'],\n    adapter: new StorageAdapter({\n        read: readStore,\n        write: writeStore,\n    }),\n    reactionOptions: {\n        // optional\n        delay: 2000,\n    },\n})(CounterStore)\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}