{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { observable, makeObservable, action } from 'mobx';\n\nfunction updateStorage(bag) {\n  localStorage.setItem('inBag', JSON.stringify(bag));\n  console.log(JSON.parse(localStorage.getItem('inBag')));\n}\n\nasync function getStorage() {\n  const res = await JSON.parse(localStorage.getItem('inBag'));\n  return res;\n}\n\nclass BagState {\n  constructor() {\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"addItem\", newItem => {\n      const currentItem = this.items.find(item => item.name === newItem.name); // items.forEach(item => {\n      //     item.name === newItem.name\n      // });\n\n      if (currentItem) {\n        currentItem.quantity++;\n      } else {\n        newItem.quantity = 1;\n        this.items = [...this.items, newItem];\n      }\n\n      updateStorage(this.items);\n    });\n\n    _defineProperty(this, \"removeItem\", itemName => {\n      this.items = this.items.filter(item => item.name !== itemName);\n      updateStorage(this.items);\n    });\n\n    _defineProperty(this, \"changeQuantity\", (itemName, value) => {\n      const currentItem = this.items.find(item => item.name === itemName);\n      currentItem.quantity = value;\n      updateStorage(this.items);\n    });\n\n    this.items = [], makeObservable(this, {\n      items: observable,\n      addItem: action,\n      removeItem: action,\n      changeQuantity: action\n    });\n  }\n\n}\n\nexport default new BagState();","map":{"version":3,"sources":["/Users/colton/Documents/Projects/Web/GitHub/estores/coffee/coffee-and-cakes/lib/Bag.js"],"names":["observable","makeObservable","action","updateStorage","bag","localStorage","setItem","JSON","stringify","console","log","parse","getItem","getStorage","res","BagState","constructor","newItem","currentItem","items","find","item","name","quantity","itemName","filter","value","addItem","removeItem","changeQuantity"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,MAArC,QAAmD,MAAnD;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACxBC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAA9B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAX,CAAZ;AACH;;AAED,eAAeC,UAAf,GAA4B;AACxB,QAAMC,GAAG,GAAG,MAAMP,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAX,CAAlB;AACA,SAAOE,GAAP;AACH;;AAGD,MAAMC,QAAN,CAAe;AA4BXC,EAAAA,WAAW,GAAG;AAAA,mCA3BN,EA2BM;;AAAA,qCAzBJC,OAAO,IAAI;AACjB,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcL,OAAO,CAACK,IAA9C,CAApB,CADiB,CAEjB;AACA;AACA;;AACA,UAAIJ,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACK,QAAZ;AACH,OAFD,MAEO;AACHN,QAAAA,OAAO,CAACM,QAAR,GAAmB,CAAnB;AACA,aAAKJ,KAAL,GAAa,CAAC,GAAG,KAAKA,KAAT,EAAgBF,OAAhB,CAAb;AACH;;AACDd,MAAAA,aAAa,CAAC,KAAKgB,KAAN,CAAb;AACH,KAaa;;AAAA,wCAXDK,QAAQ,IAAI;AACrB,WAAKL,KAAL,GAAa,KAAKA,KAAL,CAAWM,MAAX,CAAkBJ,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcE,QAAxC,CAAb;AACArB,MAAAA,aAAa,CAAC,KAAKgB,KAAN,CAAb;AACH,KAQa;;AAAA,4CANG,CAACK,QAAD,EAAWE,KAAX,KAAqB;AAClC,YAAMR,WAAW,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcE,QAAtC,CAApB;AACAN,MAAAA,WAAW,CAACK,QAAZ,GAAuBG,KAAvB;AACAvB,MAAAA,aAAa,CAAC,KAAKgB,KAAN,CAAb;AACH,KAEa;;AACV,SAAKA,KAAL,GAAa,EAAb,EACAlB,cAAc,CAAC,IAAD,EAAO;AACjBkB,MAAAA,KAAK,EAAEnB,UADU;AAEjB2B,MAAAA,OAAO,EAAEzB,MAFQ;AAGjB0B,MAAAA,UAAU,EAAE1B,MAHK;AAIjB2B,MAAAA,cAAc,EAAE3B;AAJC,KAAP,CADd;AAQH;;AArCU;;AAwCf,eAAe,IAAIa,QAAJ,EAAf","sourcesContent":["import { observable, makeObservable, action } from 'mobx'\n\nfunction updateStorage(bag) {\n    localStorage.setItem('inBag', JSON.stringify(bag))\n    console.log(JSON.parse(localStorage.getItem('inBag')))\n}\n\nasync function getStorage() {\n    const res = await JSON.parse(localStorage.getItem('inBag'))\n    return res\n}\n\n\nclass BagState {\n    items = []\n\n    addItem = newItem => {\n        const currentItem = this.items.find(item => item.name === newItem.name)\n        // items.forEach(item => {\n        //     item.name === newItem.name\n        // });\n        if (currentItem) {\n            currentItem.quantity++\n        } else {\n            newItem.quantity = 1\n            this.items = [...this.items, newItem]\n        }\n        updateStorage(this.items)\n    }\n\n    removeItem = itemName => {\n        this.items = this.items.filter(item => item.name !== itemName)\n        updateStorage(this.items)\n    }\n\n    changeQuantity = (itemName, value) => {\n        const currentItem = this.items.find(item => item.name === itemName)\n        currentItem.quantity = value\n        updateStorage(this.items)\n    }\n\n    constructor() {\n        this.items = [],\n        makeObservable(this, {\n            items: observable,\n            addItem: action,\n            removeItem: action,\n            changeQuantity: action,\n        })\n        \n    }\n}\n\nexport default new BagState()\n"]},"metadata":{},"sourceType":"module"}